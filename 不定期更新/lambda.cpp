// ラムダ式関数について
// 「ラムダ式(lambda expressions)」は、
// 簡易的な 関数オブジェクト をその場で定義するための機能である。

// この機能によって、「高階関数(関数を引数もしくは戻り値とする関数)」をより使いやすくできる。

// ラムダ式の構成 ------
// [ラムダ導入子](パラメーターリスト)mutable 例外仕様 属性 -> 戻り値の型{命令}
//---------
#include <iostream>

int main()
{
   // 基本
   auto plus = [](int a, int b)
   { return a + b; };      // こうしてラムダ式が作れる
   int added = plus(2, 3); // 結果は5
   std::cout << added << std::endl;

   //   ↑  このラムダ式によってその場に以下のような関数オブジェクトが定義される
   //        ↓ラムダ式によって自動的に定義される関数オブジェクトは、それぞれが一意な型名を持ち、
   //              その型名をユーザーが知る方法はないので，autoやstd::function変数を使う
   // struct F
   // {
   //    auto operator()(int a, int b) const -> decltype(a + b)
   //    {
   //       return a + b;
   //    }
   // };

   // ラムダ式で外部の変数を使用するためには，
   //       キャプチャを使う(キャプチャとはデータを取り込むこと)
   // capture = 「コンピューターのディスプレーに表示された静止画や動画をデータとして保存すること」

   // ラムダ式でキャプチャをするにはラムダ導入子で度の変数をどのようにキャプチャするかを選択しなければならない．

   // コピーか参照かを選ぶことができtる

   // コピー   現時点で見える変数をコピーし，キャプチャする
   int x = 0;
   auto copy = [=]
   { return x + 1; };                // 特定の関数を指定する場合は[x]の様にする
   std::cout << copy() << std::endl; // 出力 1

   // 参照
   auto point = [&x]
   { x = 59; }; // ↑個別に変数を指定したい場合は文字をつける
   point();
   std::cout << x << std::endl; // 出力 59

   // キャプチャの種類
   //[&][=][&x][&,x][=,x][this][this,x]

   //[&,x] デフォルトで参照，xのみコピーして使用([=,x]も同様)
   //[this] *thisのメンバを参照(thisはこの関数のあるクラス)
   //[this,x] 同様，xのみコピー

   // 省略可能な範囲ーーーーーーーー
   // ラムダ式の全貌(上記)の内，

   //(パラメータリスト) mutable 例外仕様 属性 -> 戻り値の型

   // は省略できる．ーーー

   //
}